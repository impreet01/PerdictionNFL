name: build + roll-forward training

on:
  schedule:
    - cron: '0 10 * 9-12,1 *'
  workflow_dispatch:
    inputs:
      run_bootstrap:
        description: 'Run bootstrap-history job (manual only)'
        required: false
        default: false
        type: boolean
      min_season:
        description: 'Bootstrap start season'
        required: false
        default: '2002'
      max_season:
        description: 'Bootstrap end season (default: last completed)'
        required: false
      season:
        description: 'Weekly update season override'
        required: false
      week:
        description: 'Weekly update week override'
        required: false

env:
  ARTIFACTS_DIR: ${{ vars.ARTIFACTS_DIR || 'artifacts' }}
  NODE_VERSION: 20.x
  LOG_LEVEL: warn
  CI_FAST: '1'
  MAX_WORKERS: '2'
  NODE_OPTIONS: "--unhandled-rejections=strict --trace-uncaught"

jobs:
  bootstrap-history:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.run_bootstrap == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 90
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Compute artifact cache prefix
        id: cache-prefix
        run: |
          set -euo pipefail
          prefix=$(node --input-type=module <<'NODE'
          import crypto from 'node:crypto';
          import fs from 'node:fs';
          const files = ['package-lock.json', 'configs/model.json', 'configs/data.json'];
          const hash = crypto.createHash('sha256');
          for (const file of files) {
            try {
              hash.update(fs.readFileSync(file));
            } catch (err) {
              if (err && err.code === 'ENOENT') continue;
              throw err;
            }
          }
          process.stdout.write(`artifacts-${hash.digest('hex')}`);
          NODE)
          echo "CACHE_KEY_PREFIX=$prefix" >> "$GITHUB_ENV"
          echo "prefix=$prefix" >> "$GITHUB_OUTPUT"

      - name: Restore artifact cache
        id: bootstrap-cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.ARTIFACTS_DIR }}
          key: ${{ steps.cache-prefix.outputs.prefix }}
          restore-keys: ${{ steps.cache-prefix.outputs.prefix }}-

      - name: Resolve bootstrap range
        id: bootstrap-range
        run: |
          set -euo pipefail
          MIN_INPUT="${{ github.event.inputs.min_season }}"
          MAX_INPUT="${{ github.event.inputs.max_season }}"
          if [ -z "${MIN_INPUT}" ]; then
            MIN_INPUT=2002
          fi
          if [ -z "${MAX_INPUT}" ]; then
            MAX_INPUT=$(node -e 'const now=new Date();const yr=now.getUTCFullYear();const mo=now.getUTCMonth()+1;const completed=mo<3?yr-1:yr;process.stdout.write(String(completed));')
          fi
          echo "min=${MIN_INPUT}" >> "$GITHUB_OUTPUT"
          echo "max=${MAX_INPUT}" >> "$GITHUB_OUTPUT"
          printf 'Resolved bootstrap window: %s-%s\n' "$MIN_INPUT" "$MAX_INPUT"

      - name: Ensure artifacts directory
        run: mkdir -p "$ARTIFACTS_DIR"

      - name: Show planned training context
        run: |
          node --input-type=module <<'NODE'
          import { getTrainSettings } from './trainer/config.js';
          const settings = getTrainSettings();
          const window = settings?.train_window;
          const label = window ? `${window.start_season ?? '?'}-${window.end_season ?? '?'}` : 'unknown';
          console.log(`[summary] config.train_window=${label}`);
          NODE

      - name: Run historical bootstrap
        env:
          BATCH_START: ${{ steps.bootstrap-range.outputs.min }}
          BATCH_END: ${{ steps.bootstrap-range.outputs.max }}
        run: |
          set -euo pipefail
          echo "Bootstrapping history ${{ steps.bootstrap-range.outputs.min }}-${{ steps.bootstrap-range.outputs.max }}"
          node trainer/train_multi.js --bootstrap ${{ steps.bootstrap-range.outputs.min }}-${{ steps.bootstrap-range.outputs.max }}

      - name: Summarise training state
        run: |
          node --input-type=module <<'NODE'
          import fs from 'node:fs';
          const statePath = `${process.env.ARTIFACTS_DIR ?? 'artifacts'}/training_state.json`;
          let warm = 'none';
          let windowText = 'unknown';
          try {
            const raw = fs.readFileSync(statePath, 'utf8');
            const parsed = JSON.parse(raw);
            const coverage = parsed?.bootstraps?.model_training?.seasons;
            if (Array.isArray(coverage) && coverage.length) {
              const start = coverage[0]?.season ?? '';
              const end = coverage[coverage.length - 1]?.season ?? '';
              windowText = `${start}-${end}`;
            }
            if (parsed?.weekly_seed?.seededFrom) {
              warm = `model_${parsed.weekly_seed.seededFrom}_W00`;
            }
          } catch (err) {
            console.log(`[summary] unable to read training_state.json (${err?.message ?? err})`);
          }
          console.log(`[summary] bootstrap_window=${windowText}`);
          console.log(`[summary] warmStartedFrom=${warm}`);
          NODE

      - name: Save artifact cache
        if: success()
        uses: actions/cache/save@v4
        with:
          path: ${{ env.ARTIFACTS_DIR }}
          key: ${{ steps.cache-prefix.outputs.prefix }}-${{ github.run_id }}

  weekly-update:
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.run_bootstrap != 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 90
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Compute artifact cache prefix
        id: cache-prefix
        run: |
          set -euo pipefail
          prefix=$(node --input-type=module <<'NODE'
          import crypto from 'node:crypto';
          import fs from 'node:fs';
          const files = ['package-lock.json', 'configs/model.json', 'configs/data.json'];
          const hash = crypto.createHash('sha256');
          for (const file of files) {
            try {
              hash.update(fs.readFileSync(file));
            } catch (err) {
              if (err && err.code === 'ENOENT') continue;
              throw err;
            }
          }
          process.stdout.write(`artifacts-${hash.digest('hex')}`);
          NODE)
          echo "CACHE_KEY_PREFIX=$prefix" >> "$GITHUB_ENV"
          echo "prefix=$prefix" >> "$GITHUB_OUTPUT"

      - name: Restore artifact cache
        id: weekly-cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.ARTIFACTS_DIR }}
          key: ${{ steps.cache-prefix.outputs.prefix }}
          restore-keys: ${{ steps.cache-prefix.outputs.prefix }}-

      - name: Ensure artifacts directory
        run: mkdir -p "$ARTIFACTS_DIR"

      - name: Resolve weekly target
        id: resolve
        run: |
          set -euo pipefail
          season_input="${{ github.event.inputs.season }}"
          week_input="${{ github.event.inputs.week }}"
          if [ -z "$season_input" ]; then
            season_input=$(node -e 'const now=new Date();const yr=now.getUTCFullYear();const month=now.getUTCMonth()+1;const season=month<3?yr-1:yr;process.stdout.write(String(season));')
          fi
          if [ -z "$week_input" ]; then
            week_input=$(node scripts/resolveWeek.js | sed -n 's/Resolved WEEK=\(.*\)$/\1/p')
          fi
          if [ -z "$week_input" ]; then
            week_input=1
          fi
          printf 'season=%s\n' "$season_input" >> "$GITHUB_OUTPUT"
          printf 'week=%s\n' "$week_input" >> "$GITHUB_OUTPUT"
          printf 'week_padded=%02d\n' "$week_input" >> "$GITHUB_OUTPUT"
          {
            echo "TARGET_SEASON=$season_input"
            echo "TARGET_WEEK=$week_input"
            printf 'PADDED_WEEK=%02d\n' "$week_input"
          } >> "$GITHUB_ENV"
          printf 'Resolved weekly target: %s-W%02d\n' "$season_input" "$week_input"

      - name: Show training context
        run: |
          node --input-type=module <<'NODE'
          import { getTrainSettings } from './trainer/config.js';
          import { listModelArtifacts } from './trainer/modelWarmStart.js';
          const season = Number(process.env.TARGET_SEASON);
          const week = Number(process.env.TARGET_WEEK);
          const settings = getTrainSettings();
          const window = settings?.train_window;
          const windowLabel = window ? `${window.start_season ?? '?'}-${window.end_season ?? '?'}` : 'unknown';
          let warm = 'none';
          if (Number.isFinite(season) && Number.isFinite(week)) {
            const entries = await listModelArtifacts();
            let candidate = null;
            for (const entry of entries) {
              if (entry.season > season) break;
              const beforeSame = entry.season === season && entry.week < week;
              const beforePrev = entry.season < season;
              if (!beforeSame && !beforePrev) continue;
              if (!candidate || entry.season > candidate.season || (entry.season === candidate.season && entry.week > candidate.week)) {
                candidate = entry;
              }
            }
            warm = candidate ? candidate.name.replace(/\.json$/, '') : 'none';
          }
          console.log(`[summary] train_window=${windowLabel}`);
          console.log(`[summary] warmStartedFrom=${warm}`);
          NODE

      - name: Run weekly training
        env:
          SEASON: ${{ steps.resolve.outputs.season }}
          WEEK: ${{ steps.resolve.outputs.week }}
        run: |
          set -euo pipefail
          echo "Training target ${{ steps.resolve.outputs.season }}-W${{ steps.resolve.outputs.week_padded }}"
          node trainer/train_multi.js --target ${{ steps.resolve.outputs.season }}-${{ steps.resolve.outputs.week }}

      - name: Summarise latest artifacts
        run: |
          node --input-type=module <<'NODE'
          import { listModelArtifacts } from './trainer/modelWarmStart.js';
          const season = Number(process.env.TARGET_SEASON);
          const week = Number(process.env.TARGET_WEEK);
          let warm = 'none';
          if (Number.isFinite(season) && Number.isFinite(week)) {
            const entries = await listModelArtifacts();
            let candidate = null;
            for (const entry of entries) {
              if (entry.season > season) break;
              if (entry.season === season && entry.week >= week) continue;
              const beforePrev = entry.season < season;
              const beforeSame = entry.season === season && entry.week < week;
              if (!beforePrev && !beforeSame) continue;
              if (!candidate || entry.season > candidate.season || (entry.season === candidate.season && entry.week > candidate.week)) {
                candidate = entry;
              }
            }
            warm = candidate ? candidate.name.replace(/\.json$/, '') : 'none';
          }
          const padded = Number.isFinite(week) ? String(week).padStart(2, '0') : '??';
          const resolvedSeason = Number.isFinite(season) ? season : '????';
          console.log(`[summary] completed target=${resolvedSeason}-W${padded}`);
          console.log(`[summary] warmStartedFrom=${warm}`);
          NODE

      - name: Save artifact cache
        if: success()
        uses: actions/cache/save@v4
        with:
          path: ${{ env.ARTIFACTS_DIR }}
          key: ${{ steps.cache-prefix.outputs.prefix }}-${{ github.run_id }}
