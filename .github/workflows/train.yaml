name: weekly model + predictions

on:
  schedule:
    - cron: '0 10 * 9-12,1 *'
  workflow_dispatch:
    inputs:
      season:
        description: 'Season override (default: current year)'
        required: false
      week:
        description: 'Week override (default: auto via resolveWeek.js)'
        required: false

jobs:
  train:
    runs-on: ubuntu-latest

    # <-- IMPORTANT: request write permission for repo contents
    permissions:
      contents: write
      pull-requests: write

    env:
      NODE_VERSION: 20.x
      LOG_LEVEL: warn
      MIN_TRAIN_SEASON: 2020

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Use the workflow token explicitly
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Use Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Ensure lockfile
        run: |
          if [ ! -f package-lock.json ]; then
            echo "No package-lock.json found; generating oneâ€¦"
            npm install --package-lock-only
          else
            echo "Found existing package-lock.json"
          fi

      - name: Bootstrap training state (if missing)
        run: npm run bootstrap:state

      - name: Verify cached training state
        run: |
          if [ ! -f artifacts/training_state.json ]; then
            echo "::error::artifacts/training_state.json is missing. Use npm run bootstrap:state or restore the cached bootstrap before running the trainer to avoid replaying every season."
            exit 1
          fi

      - name: Guard against historical override flags
        run: |
          flags=(
            REWRITE_HISTORICAL
            OVERWRITE_HISTORICAL
            REBUILD_HISTORICAL
            REGENERATE_HISTORICAL
            REGEN_HISTORICAL
            FORCE_HISTORICAL_BOOTSTRAP
          )
          tripped=()
          for flag in "${flags[@]}"; do
            value="${!flag}"
            if [ -n "${value}" ]; then
              tripped+=("${flag}")
            fi
          done
          if [ "${#tripped[@]}" -gt 0 ]; then
            echo "::error::Historical override flags detected: ${tripped[*]}. Unset them for routine runs so cached bootstraps remain valid."
            exit 1
          fi

      - name: Install deps
        run: |
          npm ci || npm install --no-audit --no-fund

      - name: Resolve season (auto unless override)
        run: |
          if [ -n "${{ github.event.inputs.season }}" ]; then
            echo "SEASON=${{ github.event.inputs.season }}" >> $GITHUB_ENV
          else
            echo "SEASON=$(node -e 'console.log(new Date().getFullYear())')" >> $GITHUB_ENV
          fi
          echo "Resolved SEASON=$SEASON"

      - name: Resolve week (auto unless override)
        id: resolve
        run: |
          if [ -n "${{ github.event.inputs.week }}" ]; then
            WEEK="${{ github.event.inputs.week }}"
            echo "WEEK=${{ github.event.inputs.week }}" >> $GITHUB_ENV
            echo "Resolved WEEK=$WEEK (manual override)"
          else
            WEEK=$(node scripts/resolveWeek.js | sed -n 's/Resolved WEEK=\(.*\)$/\1/p')
            if [ -z "$WEEK" ]; then WEEK=2; fi
            echo "WEEK=$WEEK" >> $GITHUB_ENV
            echo "Resolved WEEK=$WEEK (auto)"
          fi
          echo "WEEK=$WEEK" >> $GITHUB_OUTPUT

      - name: Run unit tests
        run: npm test

      - name: Fetch Rotowire injuries
        env:
          ROTOWIRE_ENABLED: 'true'
          SEASON: ${{ env.SEASON }}
          WEEK: ${{ steps.resolve.outputs.WEEK }}
        run: npm run fetch:injuries -- --season=$SEASON --week=$WEEK

      - name: Fetch Rotowire markets
        env:
          ROTOWIRE_ENABLED: 'true'
          SEASON: ${{ env.SEASON }}
          WEEK: ${{ steps.resolve.outputs.WEEK }}
        run: npm run fetch:markets -- --season=$SEASON --week=$WEEK

      - name: Fetch Rotowire weather
        env:
          ROTOWIRE_ENABLED: 'true'
          SEASON: ${{ env.SEASON }}
          WEEK: ${{ steps.resolve.outputs.WEEK }}
        run: npm run fetch:weather -- --season=$SEASON --week=$WEEK

      - name: Build context
        env:
          SEASON: ${{ env.SEASON }}
          WEEK: ${{ steps.resolve.outputs.WEEK }}
          SINCE_SEASON: ${{ env.MIN_TRAIN_SEASON }}
        run:  npm run build:context

      - name: Train + Predict (auto week)
        run: |
          echo "Training SEASON=$SEASON WEEK=$WEEK"
          SEASON=$SEASON WEEK=$WEEK npm run train:multi

      - name: Run Hybrid v2 Calibration
        run: node trainer/hybrid_v2.js
        env:
          SEASON: ${{ env.SEASON }}
          WEEK: ${{ steps.resolve.outputs.WEEK }}

      - name: Validate artifacts against schemas
        run: |
          echo "Validating artifacts in artifacts/"
          npm run validate:artifacts

      - name: Show artifacts
        run: |
          echo "Artifacts directory:"
          ls -lah artifacts || true
          for f in artifacts/season_index_*.json artifacts/season_summary_*.json; do
            [ -f "$f" ] && echo "--- $f ---" && cat "$f"
          done

      # --- Commit directly; if blocked by branch protection, open PR fallback ---
      - name: Commit artifacts (try main)
        id: commit_main
        continue-on-error: true
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Ensure origin uses token (avoids 403)
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

          git add artifacts/*.json || true
          if git diff --cached --quiet; then
            echo "no_changes=true" >> $GITHUB_OUTPUT
            echo "No artifact changes to commit."
            exit 0
          fi
          git status --short || true
          git commit -m "weekly model + predictions (S=$SEASON, W=$WEEK)"
          git pull --rebase --autostash || true
          git push
          echo "no_changes=false" >> $GITHUB_OUTPUT

      - name: Create PR (fallback if push failed or branch protected)
        if: steps.commit_main.outcome == 'failure'
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "weekly model + predictions (S=${{ env.SEASON }}, W=${{ env.WEEK }})"
          title: "Artifacts: S=${{ env.SEASON }}, W=${{ env.WEEK }}"
          body: "Automated artifacts update. Merge to publish."
          branch: "bot/artifacts-S${{ env.SEASON }}-W${{ env.WEEK }}"
          add-paths: |
            artifacts/*.json
