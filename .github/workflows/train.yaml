name: weekly model + predictions

on:
  schedule:
    - cron: '0 10 * 9-12,1 *'
  workflow_dispatch:
    inputs:
      season:
        description: 'Season override (default: current year)'
        required: false
      week:
        description: 'Week override (default: auto via resolveWeek.js)'
        required: false

env:
  ARTIFACTS_DIR: ${{ vars.ARTIFACTS_DIR || 'artifacts' }}
  NODE_VERSION: 20.x
  LOG_LEVEL: info
  CI_FAST: '1'
  MAX_WORKERS: '2'

jobs:
  bootstrap:
    runs-on: ubuntu-latest
    timeout-minutes: 75
    strategy:
      max-parallel: 1
      matrix:
        chunk:
          - label: '1999-2000'
            start: 1999
            end: 2000
            artifact_in: ''
            artifact_out: 'bootstrap-1999-2000'
          - label: '2001-2002'
            start: 2001
            end: 2002
            artifact_in: 'bootstrap-1999-2000'
            artifact_out: 'bootstrap-2001-2002'
          - label: '2003-2004'
            start: 2003
            end: 2004
            artifact_in: 'bootstrap-2001-2002'
            artifact_out: 'bootstrap-2003-2004'
          - label: '2005-2006'
            start: 2005
            end: 2006
            artifact_in: 'bootstrap-2003-2004'
            artifact_out: 'bootstrap-2005-2006'
          - label: '2007-2008'
            start: 2007
            end: 2008
            artifact_in: 'bootstrap-2005-2006'
            artifact_out: 'bootstrap-2007-2008'
          - label: '2009-2010'
            start: 2009
            end: 2010
            artifact_in: 'bootstrap-2007-2008'
            artifact_out: 'bootstrap-2009-2010'
          - label: '2011-2012'
            start: 2011
            end: 2012
            artifact_in: 'bootstrap-2009-2010'
            artifact_out: 'bootstrap-2011-2012'
          - label: '2013-2014'
            start: 2013
            end: 2014
            artifact_in: 'bootstrap-2011-2012'
            artifact_out: 'bootstrap-2013-2014'
          - label: '2015-2016'
            start: 2015
            end: 2016
            artifact_in: 'bootstrap-2013-2014'
            artifact_out: 'bootstrap-2015-2016'
          - label: '2017-2018'
            start: 2017
            end: 2018
            artifact_in: 'bootstrap-2015-2016'
            artifact_out: 'bootstrap-2017-2018'
          - label: '2019-2020'
            start: 2019
            end: 2020
            artifact_in: 'bootstrap-2017-2018'
            artifact_out: 'bootstrap-2019-2020'
          - label: '2021-2022'
            start: 2021
            end: 2022
            artifact_in: 'bootstrap-2019-2020'
            artifact_out: 'bootstrap-2021-2022'
          - label: '2023-2024'
            start: 2023
            end: 2024
            artifact_in: 'bootstrap-2021-2022'
            artifact_out: 'historical_bootstrap'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Configure logger import for Node
        run: |
          SCRIPT="${GITHUB_WORKSPACE}/ci/setupLogger.js"
          if [ ! -f "$SCRIPT" ]; then
            echo "::error::Expected logger bootstrap script missing at $SCRIPT"
            exit 1
          fi
          echo "NODE_OPTIONS=--import=$SCRIPT" >> "$GITHUB_ENV"
      - name: Use Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Prepare artifacts directory
        run: |
          ROOT="${ARTIFACTS_DIR:-artifacts}"
          rm -rf "${ROOT}"
          mkdir -p "${ROOT}"
      - name: Restore previous artifacts
        if: ${{ matrix.chunk.artifact_in != '' }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.chunk.artifact_in }}
          path: ${{ env.ARTIFACTS_DIR }}
      - name: Ensure lockfile
        run: |
          if [ ! -f package-lock.json ]; then
            echo "No package-lock.json found; generating one…"
            npm install --package-lock-only
          else
            echo "Found existing package-lock.json"
          fi
      - name: Install deps
        run: npm ci || npm install --no-audit --no-fund
      - name: Bootstrap training state (if missing)
        run: |
          ROOT="${ARTIFACTS_DIR:-artifacts}"
          if [ ! -f "${ROOT}/training_state.json" ]; then
            BATCH_START=${{ matrix.chunk.start }} \
            BATCH_END=${{ matrix.chunk.end }} \
            npm run bootstrap:state -- --start ${{ matrix.chunk.start }} --end ${{ matrix.chunk.end }}
          fi
      - name: Run chunked historical training ${{ matrix.chunk.label }}
        env:
          BATCH_START: ${{ matrix.chunk.start }}
          BATCH_END: ${{ matrix.chunk.end }}
          CI_FAST: '1'
        run: |
          echo "Running historical chunk ${{ matrix.chunk.label }}"
          ROOT="${ARTIFACTS_DIR:-artifacts}"
          CHUNK_DIR="${ROOT}/chunks"
          MARKER="${CHUNK_DIR}/model_${{ matrix.chunk.label }}.done"
          if [ -f "${MARKER}" ]; then
            echo "Chunk ${{ matrix.chunk.label }} already complete – skipping."
            exit 0
          fi
          BATCH_START=${{ matrix.chunk.start }} \
          BATCH_END=${{ matrix.chunk.end }} \
          CI_FAST=1 npm run train:multi
      - name: Verify chunk markers present ${{ matrix.chunk.label }}
        run: |
          ROOT="${ARTIFACTS_DIR:-artifacts}"
          CHUNK_DIR="${ROOT}/chunks"
          echo "[verify] ARTIFACTS_DIR=${ROOT}"
          echo "[verify] Looking for chunk markers in: ${CHUNK_DIR}"

          if [ ! -d "${CHUNK_DIR}" ] || ! ls "${CHUNK_DIR}"/model_*.done >/dev/null 2>&1; then
            echo "::error::Missing historical bootstrap cache markers in ${CHUNK_DIR}"
            echo "::group::Debug listing"
            ls -la "${ROOT}" || true
            ls -la "${CHUNK_DIR}" || true
            echo "::endgroup::"
            exit 1
          fi
      - name: Verify status markers present ${{ matrix.chunk.label }}
        run: |
          ROOT="${ARTIFACTS_DIR:-artifacts}"
          STATUS_DIR="${ROOT}/.status"
          echo "[verify] ARTIFACTS_DIR=${ROOT}"
          echo "[verify] STATUS_DIR=${STATUS_DIR}"

          if [ ! -d "${STATUS_DIR}" ]; then
            echo "::error::.status directory missing in ${ROOT}"
            ls -la "${ROOT}" || true
            exit 1
          fi

          missing=()
          for season in $(seq ${{ matrix.chunk.start }} ${{ matrix.chunk.end }}); do
            marker="${STATUS_DIR}/${season}.done"
            if [ ! -f "${marker}" ]; then
              missing+=("${marker}")
            fi
          done

          if [ ${#missing[@]} -gt 0 ]; then
            echo "::error::Missing status markers: ${missing[*]}"
            ls -la "${STATUS_DIR}" || true
            exit 1
          fi

          echo "[verify] Found status markers:" "${STATUS_DIR}"/*.done
      - name: Pack bootstrap chunk ${{ matrix.chunk.label }}
        run: |
          ROOT="${ARTIFACTS_DIR:-artifacts}"
          tar -czf bootstrap_chunk.tgz -C "${ROOT}" .
          mv bootstrap_chunk.tgz "${ROOT}/bootstrap-${{ matrix.chunk.label }}.tgz"
          if [ "${{ matrix.chunk.artifact_out }}" = "historical_bootstrap" ]; then
            cp "${ROOT}/bootstrap-${{ matrix.chunk.label }}.tgz" "${ROOT}/historical_bootstrap.tgz"
          fi
      - name: Upload artifacts ${{ matrix.chunk.label }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.chunk.artifact_out }}
          path: ${{ env.ARTIFACTS_DIR }}
          if-no-files-found: warn
          retention-days: 7
      - name: Upload logger output ${{ matrix.chunk.label }}
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-logs-${{ matrix.chunk.label }}
          path: logs
          if-no-files-found: ignore
          retention-days: 7

  train:
    runs-on: ubuntu-latest
    needs: bootstrap
    timeout-minutes: 90
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Configure logger import for Node
        run: |
          SCRIPT="${GITHUB_WORKSPACE}/ci/setupLogger.js"
          if [ ! -f "$SCRIPT" ]; then
            echo "::error::Expected logger bootstrap script missing at $SCRIPT"
            exit 1
          fi
          echo "NODE_OPTIONS=--import=$SCRIPT" >> "$GITHUB_ENV"
      - name: Use Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Prepare artifacts directory
        run: |
          ROOT="${ARTIFACTS_DIR:-artifacts}"
          rm -rf "${ROOT}"
          mkdir -p "${ROOT}"
      - name: Resolve bootstrap revision
        run: |
          REVISION=$(node --input-type=module -e "import('./trainer/trainingState.js').then((m) => process.stdout.write(m.CURRENT_BOOTSTRAP_REVISION))")
          echo "CURRENT_BOOTSTRAP_REVISION=$REVISION" >> $GITHUB_ENV
      - name: Restore historical cache
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.ARTIFACTS_DIR }}/models
            ${{ env.ARTIFACTS_DIR }}/outcomes
            ${{ env.ARTIFACTS_DIR }}/predictions
            ${{ env.ARTIFACTS_DIR }}/training_state.json
          key: historical-${{ hashFiles('trainer/trainingState.js') }}-${{ env.CURRENT_BOOTSTRAP_REVISION }}
      - name: Download merged historical (fallback)
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/download-artifact@v4
        with:
          name: historical_bootstrap
          path: ${{ env.ARTIFACTS_DIR }}
      - name: Extract merged historical
        if: steps.cache.outputs.cache-hit != 'true' && hashFiles(format('{0}/historical_bootstrap.tgz', env.ARTIFACTS_DIR)) != ''
        run: |
          ROOT="${ARTIFACTS_DIR:-artifacts}"
          tar -xzf "${ROOT}/historical_bootstrap.tgz" -C "${ROOT}"
      - name: Ensure lockfile
        run: |
          if [ ! -f package-lock.json ]; then
            echo "No package-lock.json found; generating one…"
            npm install --package-lock-only
          else
            echo "Found existing package-lock.json"
          fi
      - name: Install deps
        run: npm ci || npm install --no-audit --no-fund
      - name: Resolve season (auto unless override)
        run: |
          if [ -n "${{ github.event.inputs.season }}" ]; then
            SEASON="${{ github.event.inputs.season }}"
          else
            SEASON=$(node -e 'console.log(new Date().getFullYear())')
          fi
          echo "SEASON=$SEASON" >> $GITHUB_ENV
          echo "Resolved SEASON=$SEASON"
      - name: Resolve week (auto unless override)
        id: resolve
        run: |
          if [ -n "${{ github.event.inputs.week }}" ]; then
            WEEK="${{ github.event.inputs.week }}"
            echo "WEEK=${{ github.event.inputs.week }}" >> $GITHUB_ENV
            echo "Resolved WEEK=$WEEK (manual override)"
          else
            WEEK=$(node scripts/resolveWeek.js | sed -n 's/Resolved WEEK=\(.*\)$/\1/p')
            if [ -z "$WEEK" ]; then WEEK=2; fi
            echo "WEEK=$WEEK" >> $GITHUB_ENV
            echo "Resolved WEEK=$WEEK (auto)"
          fi
          PADDED=$(printf '%02d' "$WEEK")
          echo "PAD_WEEK=$PADDED" >> $GITHUB_ENV
          echo "WEEK=$WEEK" >> $GITHUB_OUTPUT
      - name: Cold-start training state (if missing)
        run: |
          ROOT="${ARTIFACTS_DIR:-artifacts}"
          if [ ! -f "${ROOT}/training_state.json" ]; then
            echo "training_state.json missing – synthesising minimal weekly state."
            npm run bootstrap:state
          fi
        env:
          SEASON: ${{ env.SEASON }}
          WEEK: ${{ steps.resolve.outputs.WEEK }}
      - name: "Guard: training_state available"
        run: |
          ROOT="${ARTIFACTS_DIR:-artifacts}"
          [[ -f "${ROOT}/training_state.json" ]] || { echo "::error::training_state.json missing after restore"; exit 1; }
      - name: Guard against historical override flags
        run: |
          bad=()
          for k in REWRITE_HISTORICAL OVERWRITE_HISTORICAL REBUILD_HISTORICAL REGENERATE_HISTORICAL REGEN_HISTORICAL FORCE_HISTORICAL_BOOTSTRAP; do
            v="${!k-}"
            if [[ -n "$v" ]]; then bad+=("$k"); fi
          done
          if (( ${#bad[@]} )); then
            echo "::error::Historical override flags detected: ${bad[*]}"; exit 1;
          fi
      - name: Run core unit tests (must pass)
        run: npm run test:core

      - name: Run strict-batch window test (soft-fail if allowed)
        run: |
          if [ "${{ vars.CI_ALLOW_TEST_SOFT_FAIL }}" = "1" ]; then
            npm run test:strictBatch || echo "::warning::strictBatch failed (soft-fail enabled)"
          else
            npm run test:strictBatch
          fi
        continue-on-error: ${{ vars.CI_ALLOW_TEST_SOFT_FAIL == '1' }}

      - name: Upload CI artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-artifacts
          path: |
            .test_artifacts/**
            trainer/tests/*.log
            **/*.txt
            **/*.log
          if-no-files-found: warn
      - name: Upload logger output (train)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-logs-train
          path: logs
          if-no-files-found: ignore
          retention-days: 7
      - name: Fetch Rotowire injuries
        env:
          ROTOWIRE_ENABLED: 'true'
          SEASON: ${{ env.SEASON }}
          WEEK: ${{ steps.resolve.outputs.WEEK }}
        run: npm run fetch:injuries -- --season=$SEASON --week=$WEEK
      - name: Fetch Rotowire markets
        env:
          ROTOWIRE_ENABLED: 'true'
          SEASON: ${{ env.SEASON }}
          WEEK: ${{ steps.resolve.outputs.WEEK }}
        run: npm run fetch:markets -- --season=$SEASON --week=$WEEK
      - name: Fetch Rotowire weather
        env:
          ROTOWIRE_ENABLED: 'true'
          SEASON: ${{ env.SEASON }}
          WEEK: ${{ steps.resolve.outputs.WEEK }}
        run: npm run fetch:weather -- --season=$SEASON --week=$WEEK
      - name: Build context
        env:
          SEASON: ${{ env.SEASON }}
          WEEK: ${{ steps.resolve.outputs.WEEK }}
          SINCE_SEASON: ${{ env.MIN_TRAIN_SEASON }}
        run: npm run build:context
      - name: Promote prior season ensemble
        env:
          SEASON: ${{ env.SEASON }}
        run: |
          node --input-type=module -e "const season = Number(process.env.SEASON); if (!Number.isFinite(season)) { console.log('No season resolved; skipping promotion.'); process.exit(0); } const prev = season - 1; (async () => { const { promote } = await import('./trainer/promotePreviousSeason.js'); const ok = await promote({ prevSeason: prev, nextSeason: season }); if (!ok) { console.error('Unable to promote final ensemble from prior season.'); process.exit(1); } console.log(`Promoted finals from ${prev} → ${season}`); })().catch((err) => { console.error(err); process.exit(1); });"
      - name: Train + Predict (auto week)
        timeout-minutes: 25
        run: |
          ROOT="${ARTIFACTS_DIR:-artifacts}"
          echo "[train:init] ARTIFACTS_DIR=${ROOT}"
          echo "[train:init] STATUS_DIR=${ROOT}/.status"
          echo "Training SEASON=$SEASON WEEK=$WEEK"
          CI_FAST=1 SEASON=$SEASON WEEK=$WEEK npm run train:multi
      - name: Verify weekly status markers
        run: |
          ROOT="${ARTIFACTS_DIR:-artifacts}"
          STATUS_DIR="${ROOT}/.status"
          echo "[verify] ARTIFACTS_DIR=${ROOT}"
          echo "[verify] STATUS_DIR=${STATUS_DIR}"

          if [ ! -d "${STATUS_DIR}" ]; then
            echo "::error::.status directory missing in ${ROOT}"
            ls -la "${ROOT}" || true
            exit 1
          fi

          marker="${STATUS_DIR}/${SEASON}.done"
          if [ ! -f "${marker}" ]; then
            echo "::error::Missing status marker ${marker}"
            ls -la "${STATUS_DIR}" || true
            exit 1
          fi

          echo "[verify] Found marker ${marker}"
      - name: Run Hybrid v2 Calibration
        timeout-minutes: 15
        run: node trainer/hybrid_v2.js
        env:
          SEASON: ${{ env.SEASON }}
          WEEK: ${{ steps.resolve.outputs.WEEK }}
      - name: Validate artifacts against schemas
        run: |
          ROOT="${ARTIFACTS_DIR:-artifacts}"
          echo "Validating artifacts in ${ROOT}/"
          npm run validate:artifacts
      - name: Show artifacts
        run: |
          ROOT="${ARTIFACTS_DIR:-artifacts}"
          echo "Artifacts directory:"
          ls -lah "${ROOT}" || true
          for f in "${ROOT}"/season_index_*.json "${ROOT}"/season_summary_*.json; do
            [ -f "$f" ] && echo "--- $f ---" && cat "$f"
          done
      - name: "Guard: weekly artifacts generated"
        run: |
          ROOT="${ARTIFACTS_DIR:-artifacts}"
          pad_week=$(printf '%02d' "$WEEK")
          stamp="${SEASON}_W${pad_week}"
          required=(
            "${ROOT}/predictions_${stamp}.json"
            "${ROOT}/model_${stamp}.json"
            "${ROOT}/bt_features_${stamp}.json"
            "${ROOT}/diagnostics_${stamp}.json"
            "${ROOT}/context_${SEASON}_W${pad_week}.json"
          )
          missing=()
          for file in "${required[@]}"; do
            if [ ! -f "$file" ]; then
              missing+=("$file")
            fi
          done
          if (( ${#missing[@]} )); then
            echo "::error::Missing required weekly artifacts: ${missing[*]}"
            exit 1
          fi
      - name: Commit artifacts (try main)
        id: commit_main
        continue-on-error: true
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          ROOT="${ARTIFACTS_DIR:-artifacts}"
          pad_week=$(printf '%02d' "$WEEK")
          stamp="${SEASON}_W${pad_week}"
          targets=(
            "${ROOT}/predictions_${stamp}.json"
            "${ROOT}/model_${stamp}.json"
            "${ROOT}/bt_features_${stamp}.json"
            "${ROOT}/diagnostics_${stamp}.json"
            "${ROOT}/context_${SEASON}_W${pad_week}.json"
          )
          for file in "${targets[@]}"; do
            if [ -f "$file" ]; then
              git add "$file"
            fi
          done
          meta_targets=(
            "${ROOT}/training_state.json"
          )
          for file in "${meta_targets[@]}"; do
            if [ -f "$file" ]; then
              git add "$file"
            fi
          done
          find "${ROOT}" -maxdepth 1 -name '*_current.json' -print0 2>/dev/null | xargs -0 -r git add
          find "${ROOT}" -maxdepth 1 -name 'season_index_*.json' -print0 2>/dev/null | xargs -0 -r git add
          find "${ROOT}" -maxdepth 1 -name 'season_summary_*.json' -print0 2>/dev/null | xargs -0 -r git add
          if [ -d "${ROOT}/models/common" ]; then
            find "${ROOT}/models/common" -maxdepth 1 -name 'feature_stats_1999_*' -print0 2>/dev/null | xargs -0 -r git add
          fi
          if [ -d "${ROOT}/models/${SEASON}/week-00" ]; then
            find "${ROOT}/models/${SEASON}/week-00" -maxdepth 2 -type f -name '*.json' -print0 2>/dev/null | xargs -0 -r git add
          fi
          if git diff --cached --quiet; then
            echo "no_changes=true" >> $GITHUB_OUTPUT
            echo "No artifact changes to commit."
            exit 0
          fi
          git status --short || true
          git commit -m "weekly model + predictions (S=$SEASON, W=$WEEK)"
          git pull --rebase --autostash || true
          git push
          echo "no_changes=false" >> $GITHUB_OUTPUT
      - name: Create PR (fallback if push failed or branch protected)
        if: steps.commit_main.outcome == 'failure'
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "weekly model + predictions (S=${{ env.SEASON }}, W=${{ env.WEEK }})"
          title: "Artifacts: S=${{ env.SEASON }}, W=${{ env.WEEK }}"
          body: "Automated artifacts update. Merge to publish."
          branch: "bot/artifacts-S${{ env.SEASON }}-W${{ env.WEEK }}"
          add-paths: |
            ${{ env.ARTIFACTS_DIR }}/predictions_${{ env.SEASON }}_W${{ env.PAD_WEEK }}.json
            ${{ env.ARTIFACTS_DIR }}/model_${{ env.SEASON }}_W${{ env.PAD_WEEK }}.json
            ${{ env.ARTIFACTS_DIR }}/bt_features_${{ env.SEASON }}_W${{ env.PAD_WEEK }}.json
            ${{ env.ARTIFACTS_DIR }}/diagnostics_${{ env.SEASON }}_W${{ env.PAD_WEEK }}.json
            ${{ env.ARTIFACTS_DIR }}/context_${{ env.SEASON }}_W${{ env.PAD_WEEK }}.json
            ${{ env.ARTIFACTS_DIR }}/training_state.json
            ${{ env.ARTIFACTS_DIR }}/*_current.json
            ${{ env.ARTIFACTS_DIR }}/season_index_*.json
            ${{ env.ARTIFACTS_DIR }}/season_summary_*.json
            ${{ env.ARTIFACTS_DIR }}/models/common/feature_stats_1999_*
            ${{ env.ARTIFACTS_DIR }}/models/${{ env.SEASON }}/week-00/**/*.json
